name: Project Status Dashboard

on:
  schedule:
    # Update dashboard every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  collect-metrics:
    runs-on: ubuntu-latest
    outputs:
      dashboard-data: ${{ steps.collect.outputs.data }}
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Collect cross-repository metrics
        id: collect
        run: |
          # Create dashboard data collection script
          cat > collect_metrics.js << 'EOF'
          const { Octokit } = require('@octokit/rest');
          const fs = require('fs');

          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN
          });

          const owner = 'twardoch';
          const repositories = ['uubed', 'uubed-rs', 'uubed-py', 'uubed-docs'];

          async function collectMetrics() {
            const metrics = {
              timestamp: new Date().toISOString(),
              repositories: {}
            };

            for (const repo of repositories) {
              try {
                console.log(`Collecting metrics for ${repo}...`);
                
                // Repository basic info
                const repoInfo = await octokit.rest.repos.get({
                  owner,
                  repo
                });

                // Recent commits (last 30 days)
                const thirtyDaysAgo = new Date();
                thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
                
                const commits = await octokit.rest.repos.listCommits({
                  owner,
                  repo,
                  since: thirtyDaysAgo.toISOString(),
                  per_page: 100
                });

                // Open issues and PRs
                const issues = await octokit.rest.issues.listForRepo({
                  owner,
                  repo,
                  state: 'open',
                  per_page: 100
                });

                const pullRequests = await octokit.rest.pulls.list({
                  owner,
                  repo,
                  state: 'open',
                  per_page: 100
                });

                // Recent releases
                let latestRelease = null;
                try {
                  const releases = await octokit.rest.repos.listReleases({
                    owner,
                    repo,
                    per_page: 1
                  });
                  latestRelease = releases.data[0] || null;
                } catch (e) {
                  console.log(`No releases found for ${repo}`);
                }

                // Workflow runs (last 10)
                let workflowRuns = [];
                try {
                  const runs = await octokit.rest.actions.listWorkflowRunsForRepo({
                    owner,
                    repo,
                    per_page: 10
                  });
                  workflowRuns = runs.data.workflow_runs;
                } catch (e) {
                  console.log(`Could not fetch workflow runs for ${repo}`);
                }

                metrics.repositories[repo] = {
                  name: repo,
                  description: repoInfo.data.description,
                  stars: repoInfo.data.stargazers_count,
                  forks: repoInfo.data.forks_count,
                  language: repoInfo.data.language,
                  size: repoInfo.data.size,
                  updated_at: repoInfo.data.updated_at,
                  
                  // Activity metrics
                  commits_last_30_days: commits.data.length,
                  open_issues: issues.data.filter(i => !i.pull_request).length,
                  open_prs: pullRequests.data.length,
                  
                  // Latest release
                  latest_release: latestRelease ? {
                    tag_name: latestRelease.tag_name,
                    published_at: latestRelease.published_at,
                    prerelease: latestRelease.prerelease
                  } : null,
                  
                  // CI/CD status
                  recent_workflow_runs: workflowRuns.slice(0, 5).map(run => ({
                    id: run.id,
                    name: run.name,
                    status: run.status,
                    conclusion: run.conclusion,
                    created_at: run.created_at,
                    html_url: run.html_url
                  })),
                  
                  // Health indicators
                  health: {
                    has_recent_activity: commits.data.length > 0,
                    has_recent_release: latestRelease && 
                      new Date(latestRelease.published_at) > new Date(Date.now() - 90 * 24 * 60 * 60 * 1000),
                    ci_passing: workflowRuns.length > 0 && workflowRuns[0].conclusion === 'success',
                    open_issues_manageable: issues.data.filter(i => !i.pull_request).length < 20
                  }
                };

              } catch (error) {
                console.error(`Error collecting metrics for ${repo}:`, error.message);
                metrics.repositories[repo] = {
                  name: repo,
                  error: error.message
                };
              }
            }

            return metrics;
          }

          collectMetrics().then(data => {
            fs.writeFileSync('dashboard-data.json', JSON.stringify(data, null, 2));
            console.log('Metrics collected successfully');
          }).catch(error => {
            console.error('Error collecting metrics:', error);
            process.exit(1);
          });
          EOF

          # Install dependencies
          npm init -y
          npm install @octokit/rest

          # Run collection script
          node collect_metrics.js

          # Output data for next job
          echo "data<<EOF" >> $GITHUB_OUTPUT
          cat dashboard-data.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  generate-dashboard:
    needs: collect-metrics
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate dashboard HTML
        run: |
          # Create dashboard generator script
          cat > generate_dashboard.py << 'EOF'
          import json
          import sys
          from datetime import datetime, timedelta
          import os

          def generate_dashboard(metrics_data):
              data = json.loads(metrics_data)
              timestamp = data['timestamp']
              repos = data['repositories']
              
              # Calculate overall project health
              total_repos = len(repos)
              healthy_repos = sum(1 for repo in repos.values() 
                                if not repo.get('error') and 
                                   repo.get('health', {}).get('has_recent_activity', False))
              
              health_percentage = (healthy_repos / total_repos * 100) if total_repos > 0 else 0
              
              # Generate HTML
              html = f"""
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>uubed Project Dashboard</title>
              <style>
                  body {{
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      margin: 0;
                      padding: 20px;
                      background-color: #f6f8fa;
                  }}
                  .container {{
                      max-width: 1200px;
                      margin: 0 auto;
                  }}
                  .header {{
                      text-align: center;
                      margin-bottom: 30px;
                  }}
                  .header h1 {{
                      color: #24292e;
                      margin-bottom: 10px;
                  }}
                  .last-updated {{
                      color: #586069;
                      font-size: 14px;
                  }}
                  .health-overview {{
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                      gap: 20px;
                      margin-bottom: 30px;
                  }}
                  .health-card {{
                      background: white;
                      padding: 20px;
                      border-radius: 8px;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                      text-align: center;
                  }}
                  .health-score {{
                      font-size: 36px;
                      font-weight: bold;
                      color: {('#28a745' if health_percentage >= 75 else '#ffc107' if health_percentage >= 50 else '#dc3545')};
                  }}
                  .repositories {{
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
                      gap: 20px;
                  }}
                  .repo-card {{
                      background: white;
                      border-radius: 8px;
                      padding: 20px;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                  }}
                  .repo-header {{
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                      margin-bottom: 15px;
                  }}
                  .repo-name {{
                      font-size: 18px;
                      font-weight: bold;
                      color: #0366d6;
                  }}
                  .repo-stats {{
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
                      gap: 10px;
                      margin-bottom: 15px;
                  }}
                  .stat {{
                      text-align: center;
                      padding: 10px;
                      background: #f6f8fa;
                      border-radius: 4px;
                  }}
                  .stat-value {{
                      font-size: 18px;
                      font-weight: bold;
                      color: #24292e;
                  }}
                  .stat-label {{
                      font-size: 12px;
                      color: #586069;
                      text-transform: uppercase;
                  }}
                  .health-indicators {{
                      display: flex;
                      gap: 10px;
                      flex-wrap: wrap;
                  }}
                  .indicator {{
                      padding: 4px 8px;
                      border-radius: 12px;
                      font-size: 12px;
                      font-weight: bold;
                  }}
                  .indicator.good {{
                      background: #d4edda;
                      color: #155724;
                  }}
                  .indicator.warning {{
                      background: #fff3cd;
                      color: #856404;
                  }}
                  .indicator.bad {{
                      background: #f8d7da;
                      color: #721c24;
                  }}
                  .workflow-status {{
                      margin-top: 15px;
                  }}
                  .workflow-run {{
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                      padding: 8px 0;
                      border-bottom: 1px solid #e1e4e8;
                  }}
                  .workflow-run:last-child {{
                      border-bottom: none;
                  }}
                  .status-badge {{
                      padding: 2px 6px;
                      border-radius: 3px;
                      font-size: 11px;
                      font-weight: bold;
                  }}
                  .status-success {{ background: #28a745; color: white; }}
                  .status-failure {{ background: #dc3545; color: white; }}
                  .status-in_progress {{ background: #ffc107; color: #212529; }}
                  .status-queued {{ background: #6c757d; color: white; }}
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🚀 uubed Project Dashboard</h1>
                      <div class="last-updated">Last updated: {datetime.fromisoformat(timestamp.replace('Z', '+00:00')).strftime('%Y-%m-%d %H:%M UTC')}</div>
                  </div>
                  
                  <div class="health-overview">
                      <div class="health-card">
                          <div class="health-score">{health_percentage:.0f}%</div>
                          <div>Project Health</div>
                      </div>
                      <div class="health-card">
                          <div class="health-score">{total_repos}</div>
                          <div>Repositories</div>
                      </div>
                      <div class="health-card">
                          <div class="health-score">{sum(repo.get('stars', 0) for repo in repos.values() if not repo.get('error'))}</div>
                          <div>Total Stars</div>
                      </div>
                      <div class="health-card">
                          <div class="health-score">{sum(repo.get('commits_last_30_days', 0) for repo in repos.values() if not repo.get('error'))}</div>
                          <div>Commits (30d)</div>
                      </div>
                  </div>
                  
                  <div class="repositories">
          """
              
              for repo_name, repo in repos.items():
                  if repo.get('error'):
                      html += f"""
                      <div class="repo-card">
                          <div class="repo-header">
                              <div class="repo-name">{repo_name}</div>
                          </div>
                          <div style="color: #dc3545;">Error: {repo['error']}</div>
                      </div>
                      """
                      continue
                  
                  # Health indicators
                  health = repo.get('health', {})
                  indicators = []
                  
                  if health.get('has_recent_activity'):
                      indicators.append('<span class="indicator good">Active</span>')
                  else:
                      indicators.append('<span class="indicator warning">Inactive</span>')
                  
                  if health.get('ci_passing'):
                      indicators.append('<span class="indicator good">CI Passing</span>')
                  elif repo.get('recent_workflow_runs'):
                      indicators.append('<span class="indicator bad">CI Failing</span>')
                  
                  if health.get('has_recent_release'):
                      indicators.append('<span class="indicator good">Recent Release</span>')
                  
                  if health.get('open_issues_manageable'):
                      indicators.append('<span class="indicator good">Issues Under Control</span>')
                  else:
                      indicators.append('<span class="indicator warning">Many Open Issues</span>')
                  
                  # Latest release info
                  release_info = ""
                  if repo.get('latest_release'):
                      release = repo['latest_release']
                      release_date = datetime.fromisoformat(release['published_at'].replace('Z', '+00:00'))
                      days_ago = (datetime.now(release_date.tzinfo) - release_date).days
                      release_info = f"<div><strong>Latest:</strong> {release['tag_name']} ({days_ago} days ago)</div>"
                  
                  # Recent workflow runs
                  workflow_html = ""
                  if repo.get('recent_workflow_runs'):
                      workflow_html = '<div class="workflow-status"><strong>Recent Workflows:</strong>'
                      for run in repo['recent_workflow_runs'][:3]:
                          status_class = f"status-{run['conclusion'] or run['status']}"
                          status_text = run['conclusion'] or run['status']
                          workflow_html += f"""
                          <div class="workflow-run">
                              <span>{run['name']}</span>
                              <span class="status-badge {status_class}">{status_text}</span>
                          </div>
                          """
                      workflow_html += '</div>'
                  
                  html += f"""
                  <div class="repo-card">
                      <div class="repo-header">
                          <div class="repo-name">
                              <a href="https://github.com/twardoch/{repo_name}" style="text-decoration: none; color: #0366d6;">
                                  {repo_name}
                              </a>
                          </div>
                          <span style="color: #586069; font-size: 14px;">{repo.get('language', 'N/A')}</span>
                      </div>
                      
                      <div style="margin-bottom: 15px; color: #586069; font-size: 14px;">
                          {repo.get('description', 'No description')}
                      </div>
                      
                      <div class="repo-stats">
                          <div class="stat">
                              <div class="stat-value">{repo.get('stars', 0)}</div>
                              <div class="stat-label">Stars</div>
                          </div>
                          <div class="stat">
                              <div class="stat-value">{repo.get('forks', 0)}</div>
                              <div class="stat-label">Forks</div>
                          </div>
                          <div class="stat">
                              <div class="stat-value">{repo.get('open_issues', 0)}</div>
                              <div class="stat-label">Issues</div>
                          </div>
                          <div class="stat">
                              <div class="stat-value">{repo.get('commits_last_30_days', 0)}</div>
                              <div class="stat-label">Commits</div>
                          </div>
                      </div>
                      
                      <div class="health-indicators">
                          {''.join(indicators)}
                      </div>
                      
                      {release_info}
                      {workflow_html}
                  </div>
                  """
              
              html += """
                  </div>
              </div>
          </body>
          </html>
              """
              
              return html

          if __name__ == "__main__":
              metrics_data = os.environ.get('DASHBOARD_DATA', '{}')
              dashboard_html = generate_dashboard(metrics_data)
              
              with open('dashboard.html', 'w') as f:
                  f.write(dashboard_html)
              
              print("Dashboard generated successfully")
          EOF

          # Generate dashboard
          python3 generate_dashboard.py
        env:
          DASHBOARD_DATA: ${{ needs.collect-metrics.outputs.dashboard-data }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          publish_branch: gh-pages
          enable_jekyll: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Update project dashboard'

      - name: Create status badge
        run: |
          # Generate a simple status badge based on project health
          cat > status-badge.json << EOF
          {
            "schemaVersion": 1,
            "label": "project health",
            "message": "$(echo '${{ needs.collect-metrics.outputs.dashboard-data }}' | jq -r '.repositories | to_entries | map(select(.value.error == null and .value.health.has_recent_activity == true)) | length') / $(echo '${{ needs.collect-metrics.outputs.dashboard-data }}' | jq -r '.repositories | length') repos active",
            "color": "$(if [ $(echo '${{ needs.collect-metrics.outputs.dashboard-data }}' | jq -r '.repositories | to_entries | map(select(.value.error == null and .value.health.has_recent_activity == true)) | length') -ge 3 ]; then echo 'brightgreen'; else echo 'yellow'; fi)"
          }
          EOF

      - name: Upload dashboard artifacts
        uses: actions/upload-artifact@v4
        with:
          name: project-dashboard
          path: |
            dashboard.html
            status-badge.json
          retention-days: 30